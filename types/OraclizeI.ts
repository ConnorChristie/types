/* GENERATED BY TYPECHAIN VER. 0.1.5 */
/* tslint:disable */

import { BigNumber } from 'bignumber.js';
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from './typechain-runtime';

export class OraclizeI extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: 'cbAddress',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function'
      },
      {
        constant: false,
        inputs: [
          { name: '_timestamp', type: 'uint256' },
          { name: '_datasource', type: 'string' },
          { name: '_arg', type: 'string' }
        ],
        name: 'query',
        outputs: [{ name: '_id', type: 'bytes32' }],
        payable: true,
        stateMutability: 'payable',
        type: 'function'
      },
      {
        constant: false,
        inputs: [
          { name: '_timestamp', type: 'uint256' },
          { name: '_datasource', type: 'string' },
          { name: '_arg', type: 'string' },
          { name: '_gaslimit', type: 'uint256' }
        ],
        name: 'query_withGasLimit',
        outputs: [{ name: '_id', type: 'bytes32' }],
        payable: true,
        stateMutability: 'payable',
        type: 'function'
      },
      {
        constant: false,
        inputs: [{ name: '_datasource', type: 'string' }, { name: 'gaslimit', type: 'uint256' }],
        name: 'getPrice',
        outputs: [{ name: '_dsprice', type: 'uint256' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
      },
      {
        constant: false,
        inputs: [{ name: '_datasource', type: 'string' }],
        name: 'getPrice',
        outputs: [{ name: '_dsprice', type: 'uint256' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
      },
      {
        constant: false,
        inputs: [{ name: '_proofType', type: 'bytes1' }],
        name: 'setProofType',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
      },
      {
        constant: false,
        inputs: [{ name: '_gasPrice', type: 'uint256' }],
        name: 'setCustomGasPrice',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function'
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(web3: any, address: string | BigNumber): Promise<OraclizeI> {
    const contract = new OraclizeI(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === '0x0') {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get cbAddress(): Promise<string> {
    return promisify(this.rawWeb3Contract.cbAddress, []);
  }

  public queryTx(
    _timestamp: BigNumber | number,
    _datasource: string,
    _arg: string
  ): DeferredTransactionWrapper<IPayableTxParams> {
    return new DeferredTransactionWrapper<IPayableTxParams>(this, 'query', [
      _timestamp.toString(),
      _datasource.toString(),
      _arg.toString()
    ]);
  }
  public query_withGasLimitTx(
    _timestamp: BigNumber | number,
    _datasource: string,
    _arg: string,
    _gaslimit: BigNumber | number
  ): DeferredTransactionWrapper<IPayableTxParams> {
    return new DeferredTransactionWrapper<IPayableTxParams>(this, 'query_withGasLimit', [
      _timestamp.toString(),
      _datasource.toString(),
      _arg.toString(),
      _gaslimit.toString()
    ]);
  }
  public getPriceTx(
    _datasource: string,
    gaslimit: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'getPrice', [
      _datasource.toString(),
      gaslimit.toString()
    ]);
  }
  public setProofTypeTx(_proofType: BigNumber): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'setProofType', [_proofType.toString()]);
  }
  public setCustomGasPriceTx(_gasPrice: BigNumber | number): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'setCustomGasPrice', [
      _gasPrice.toString()
    ]);
  }
}
